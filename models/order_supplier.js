"use strict";

/**
 * Module dependencies.
 */
var mongoose = require('mongoose'),
    Schema = mongoose.Schema,
    timestamps = require('mongoose-timestamp');

var Dict = INCLUDE('dict');

var setPrice = MODULE('utils').setPrice;
var setDate = MODULE('utils').setDate;

/**
 * Article Schema
 */
var orderSupplierSchema = new Schema({
    ref: { type: String, unique: true },
    Status: { type: String, default: 'NEW' },
    /*title: {//For internal use only
        ref: String,
        autoGenerated: {type: Boolean, default: false}, //For automatic process generated bills
    },*/
    isremoved: Boolean,
    supplier: {
        id: { type: Schema.Types.ObjectId, ref: 'Societe' },
        name: String,
        isNameModified: { type: Boolean }
    },
    contacts: [{ type: Schema.Types.ObjectId, ref: 'contact' }],
    type: { type: String, default: 'SRC_COMM' },
    ref_supplier: { type: String },
    cond_reglement_code: { type: String, default: 'RECEP' },
    mode_reglement_code: { type: String, default: 'TIP' },
    delivery_mode: { type: String, default: "Comptoir" },
    billing: {
        societe: {
            id: { type: Schema.Types.ObjectId, ref: 'societe' },
            name: String
        },
        contact: String,
        address: String,
        zip: String,
        town: String,
        country: String
    },
    datec: { type: Date, default: Date.now, set: setDate },
    date_livraison: { type: Date, default: Date.now, set: setDate },
    notes: [{
        _id: false,
        author: {
            id: { type: Schema.Types.ObjectId, ref: 'hr' },
            name: String
        },
        datec: Date,
        note: String
    }],
    total_ht: { type: Number, default: 0, set: setPrice },
    total_tva: [{
        tva_tx: Number,
        total: { type: Number, default: 0 }
    }],
    total_ttc: { type: Number, default: 0 },
    shipping: {
        total_ht: { type: Number, default: 0, set: setPrice },
        tva_tx: { type: Number, default: 20 },
        total_tva: { type: Number, default: 0 },
        total_ttc: { type: Number, default: 0 }
    },
    author: { id: { type: Schema.Types.ObjectId, ref: 'hr' }, name: String },
    commercial_id: {
        id: { type: Schema.Types.ObjectId, ref: 'hr' },
        name: String
    },
    entity: { type: String },
    bl: [{
        _id: false,
        societe: {
            id: { type: Schema.Types.ObjectId, ref: 'societe' },
            name: String
        },
        label: String,
        name: String,
        contact: String,
        address: String,
        zip: String,
        town: String,
        products: [{
            id: Schema.Types.ObjectId,
            name: String,
            qty: {
                type: Number,
                default: 0
            } // QTY Order
        }],
        shipping: {
            id: String,
            label: String,
            address: Boolean,
            total_ht: {
                type: Number,
                default: 0
            }
        }
    }],
    weight: { type: Number, default: 0 }, // Poids total
    lines: [{
        _id: false,
        //pu: {type: Number, default: 0},
        qty: {
            type: Number,
            default: 0
        },
        qty_deliv: { type: Number, default: 0 }, // Quantity already delivery
        tva_tx: {
            type: Number,
            default: 0
        },
        //price_base_type: String,
        title: String,
        priceSpecific: { type: Boolean, default: false },
        pu_ht: {
            type: Number,
            default: 0
        },
        description: String,
        product_type: String,
        product: {
            id: {
                type: Schema.Types.ObjectId,
                ref: "product"
            },
            name: {
                type: String
            },
            label: String,
            dynForm: String
                // family: {type: String, uppercase: true, default: "OTHER"}
        },
        total_tva: {
            type: Number,
            default: 0
        },
        total_ttc: {
            type: Number,
            default: 0
        },
        discount: {
            type: Number,
            default: 0
        },
        //total_ht_without_discount: {type: Number, default: 0},
        //total_ttc_without_discount: {type: Number, default: 0},
        //total_vat_without_discount: {type: Number, default: 0},
        total_ht: {
            type: Number,
            default: 0,
            set: setPrice
        },
        weight: { type: Number, default: 0 },
        optional: { type: Schema.Types.Mixed }
    }],
    history: [{
        _id: false,
        date: { type: Date, default: Date.now },
        author: {
            id: {
                type: Schema.Types.ObjectId,
                ref: 'hr'
            },
            name: String
        },
        mode: String, //email, order, alert, new, ...
        Status: String,
        msg: String
    }],
    SN: { type: Schema.Types.ObjectId, default: null }, //Serial Number
    optional: {}
}, {
    toObject: { virtuals: true },
    toJSON: { virtuals: true }
});

orderSupplierSchema.plugin(timestamps);

/**
 * Pre-save hook
 */
orderSupplierSchema.pre('save', function(next) {

    var SeqModel = MODEL('Sequence').Schema;
    var EntityModel = MODEL('entity').Schema;
    var self = this;

    MODULE('utils').sumTotal(this.lines, this.shipping, this.discount, this.supplier.id, function(err, result) {
        if (err)
            return next(err);

        self.total_ht = result.total_ht;
        self.total_tva = result.total_tva;
        self.total_ttc = result.total_ttc;

        if (self.isNew && !self.ref)
        //console.log(self.entity);
            return EntityModel.findOne({ _id: self.entity }, "cptRef", function(err, entity) {
            if (err)
                return console.log(err);

            if (entity && entity.cptRef) {
                SeqModel.inc("CF" + entity.cptRef, self.datec, function(seq, idx) {
                    //console.log(seq);
                    self.ref = "CF" + entity.cptRef + seq;
                    //if (!self.pieceAccounting)
                    //    self.pieceAccounting = parseInt(seq);
                    next();
                });
            } else {
                SeqModel.inc("CF", self.datec, function(seq, idx) {
                    self.ref = "CF" + seq;
                    //if (!self.pieceAccounting)
                    //    self.pieceAccounting = parseInt(seq);
                    next();
                });
            }
        });

        self.ref = F.functions.refreshSeq(self.ref, self.datec);
        next();

    });
});

orderSupplierSchema.virtual('status')
    .get(function() {
        var res_status = {};

        var status = this.Status;

        //console.log("status :" + status);

        if (status && exports.Status.values[status].label) {
            //console.log(this);
            res_status.id = status;
            //res_status.name = i18n.t("orders:" + statusList.values[status].label);
            res_status.name = exports.Status.values[status].label;
            res_status.css = exports.Status.values[status].cssClass;
        } else { // By default
            res_status.id = status;
            res_status.name = status;
            res_status.css = "";
        }
        return res_status;

    });

exports.Status = {
    "_id": "fk_order_status_supplier",
    "values": {
        "NEW": {
            "enable": true,
            "label": "Nouveau",
            "cssClass": "label-warning"
        },
        "ACCEPTED": {
            "enable": true,
            "label": "Accepté / validé",
            "cssClass": "label-success"
        },
        "REFUSED": {
            "label": "Refusé",
            "enable": true,
            "cssClass": "label-danger"
        },
        "BILLED": {
            "label": "Facturé",
            "enable": true,
            "cssClass": "label-default"
        },
        "PRINTED": {
            "label": "Edité",
            "cssClass": "label-success"
        }
    }
};

exports.Schema = mongoose.model('orderSupplier', orderSupplierSchema, 'OrderSupplier');
exports.name = "orderSupplier";